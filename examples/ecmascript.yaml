-
  id: group:general-constructors
  name: General purpose Constructors
  kind: group

-
  id: Array
  name: Array
  kind: class
  signatures:
    - new => a... -> Array
    - new => Number -> Array
  inherit: Object
  parent: group:global/group:general-constructors
  text: |
    A `Constructor` for JavaScript arrays.

    Arrays are high-level, list-like objects that can hold any kind of
    value (including other arrays). This object, and its relative
    prototype provide arrays with several built-in methods for
    traversing arrays, mutating them and transforming them.

    An array's size (reflected on its `length` property) is not fixed,
    and can grow and shrink automatically, at any moment, as elements
    are added to or removed from the array. This particular feature,
    often times desirable, leads JavaScript arrays to be naturally
    sparse â€” that is, not necessarily all indexes in the range `0..n`,
    for any array of size `n` will contain elements. While engines might
    do their best to optimise dense and nearly-dense arrays, if you want
    guarantees for that (for optimisation purposes), you might consider
    using WebGL `typed arrays` instead.


    @@@ Constructing arrays

    You can construct arrays in three flavours. The preferred way of
    creating a new array is to use the `array literal` syntax:

    ```js
    var xs = ['apples', 'oranges']
    // (Array) => ['apples', 'oranges']
    ```

    Equivalent to that form, you can invoke the `Array` constructor with
    the `new` operator to construct a new array pre-filled with
    elements:

    ```js
    var xs = new Array('apples', 'oranges')
    // (Array) => ['apples', 'oranges']
    ```

    Finally, you can construct an array by giving only the array's
    size. If the **first and only** argument given to the `Array`
    constructor is a `Number`, you'll get back a sparse `Array` with the
    given size but no elements. Engines might use this as a hint to
    pre-allocate memory, but it's not guaranteed by the specification:

    ```js
    var xs = new Array(5)
    // => (Array) []

    xs.length
    // => (Number) 5
    ```

    It's important to note that the `length` of the array should be a
    `Number` in the range `0..2Â³Â²`. Trying to initialise an array
    outside of those boundaries, or changing an array length without
    complying with that number will raise a `RangeError` exception.


    @@@ Accessing array elements

    Arrays use `0`-based indexes, and individual elements can be
    accessed through the bracket notation:

    ```js
    var xs = [1, 2, 3]
    xs[0] // => (Number) 1
    xs[1] // => (Number) 2
    xs[2] // => (Number) 3
    ```


    @@@ The Array's size

    The array's size is reflected on the `length` property, and this
    property also controls the total size of an array. Setting the
    `length` of an array will also resize the array to contain the
    appropriate number of elements.

    Likewise, adding elements, or even setting a value at an index
    within the Array's length range will resize the array to accomodate
    this new elements. Note that, however, since JavaScript arrays are
    sparse, an array with `length` of `200`, but only one element, will
    not allocate additional memory for the other 199 indexes that are
    not set.

    ```js
    var xs = [1, 2, 3]
    xs[2]
    // => (Number) 3

    xs.length
    // => (Number) 3

    xs.length = 1
    xs[2]
    // => (Undefined)

    xs[1]
    // => (Undefined) 
    
    xs[0]
    // => (Number) 1

    xs.length = 5
    xs[2]
    // => (Undefined)

    xs[10] = 10
    xs.length
    // => (Number) 10
    ```