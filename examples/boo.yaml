-
  id: boo
  name: boo
  kind: module
  text: |
    Base primitives for prototypical Object Orientation.

-
  id: boo/@aliases
  name: Aliases
  kind: group
  parent: boo

-
  id: boo/@interfaces
  name: Interfaces
  kind: group
  parent: boo

-
  id: boo/:t/DataObject
  name: DataObject
  kind: type
  signatures:
    - '{ "to_data" -> () -> Object }'
  parent: boo/@interfaces

-
  id: boo/:t/Mixin
  name: Mixin
  kind: type
  signatures:
    - { Object | DataObject }
  parent: boo/@interfaces

-
  id: boo/@helpers
  name: Helpers (Internal)
  kind: group
  parent: boo

-
  id: boo/copy_property
  name: copy_property
  kind: function
  signatures: 
    - Object, Object*, String -> Object
  parent: boo/@helpers
  text: |
    `(internal)` Copies a property from `source` to `target`.
  language: JavaScript
  repository: http://github.com/killdream/boo
  copyright: © 2011
  authors:
    -
      name: Quildreen "Sorella" Motta
      email: quildreen@gmail.com
      website: http://killdream.github.com/
  licence: MIT
  file: lib/boo.js
  line: 59
  end-line: 64
  code: |
    function copy_property(source, target, property) {
      !has_getter_p?     target[property] = source[property]
      : /* otherwise */  define(target, property, descriptor(source, property))
  
      return target
    }

-
  id: boo/data_obj_p
  name: data_obj_p
  kind: function
  signatures:
    - a -> Bool
  parent: boo/@helpers
  text: |
    `(internal)` Checks if the given subject matches the `DataObject` type.
  language: JavaScript
  repository: http://github.com/killdream/boo
  copyright: © 2011
  authors:
    -
      name: Quildreen "Sorella" Motta
      email: quildreen@gmail.com
      website: http://killdream.github.com/
  licence: MIT
  file: lib/boo.js
  line: 71
  end-line: 73
  code: |
    function data_obj_p(subject) {
      return subject != null
      &&     typeof subject.to_data == 'function' }
